function [sc, sci] = fitnessHSP(x)
%---------------------------------------------------%
% Fitness function for the GAGABIRO power amplifier %
% Viva Joao Bosco e Aldir Blanc!!                   %
% Author: Joao Victor Colombari Carlet              %
% Contact: jvccarlet@usp.br                         %
%---------------------------------------------------%

% sc gives the total score, and sci gives the partial scores
warning('off', 'all');

% this function calls LTspice XVII simulator and is entirelly made for
% using it. If you want to use any other one, go to CirOp.m and add it or
% just check if it is already there. Then you'd change where it matters,
% specially when simmulations are calld ;)

global slash;
global simuladorltspiceXVII;
global circuito;
global ParDados;
global genesLB;
global Best;
global BestRes;
global scorePlot;
global xT;
global modoind;
global modo;
global dif;
global snap;
global cont;
global contsuc;
global namext;
global contopt;

% New performance targets (from new ParDados)
global GainMin; 
global SlewMin;
global LocutMin;
global HicutMin;
global MaxSwing;
global PowW;
global THDMin;
global GedLeeMax;

% takes targets from menu
target_Gain         = ParDados{1, 2}; GainMin    = scoreAvPar(1, Gain);
target_Slew         = ParDados{2, 2}; SlewMin    = scoreAvPar(1, Slew);
target_Locut        = ParDados{3, 2}; LocutMin   = scoreAvPar(1, Locut);
target_Hicut        = ParDados{4, 2}; HicutMin   = scoreAvPar(1, Hicut);
target_MaxSwingData = ParDados{5, 2}; MaxSwing   = scoreAvPar(1, MaxSwingData);
target_Pow          = ParDados{6, 2}; PowW       = scoreAvPar(1, Pow);
target_THD          = ParDados{7, 2}; THDMin     = scoreAvPar(1, THD);
target_GedLee       = ParDados{8, 2}; GedLeeMax  = scoreAvPar(1, GedLee);

% denormalizes genes
j = 1;
for i = 1:length(genesLB)
    if (dif(i) ~= 0)
        xr(i) = (x(j) * dif(i) + genesLB(i));
        xe(i) = x(j);
        j = j + 1;
    else
        xr(i) = genesLB(i);
        xe(i) = 0;
    end
    if (snap(i) ~= 0)
        xr(i) = round(xr(i) / snap(i)) * snap(i);
    end
end

% Print debug info
disp '______________________________'
cont = cont + 1;
fprintf('Simulation = %d (success = %d)\n', cont, contsuc);

% Print parameters used
for i = 1:length(xr)
    if (mod(i, 10) == 0)
        fprintf('\n');
    end
    fprintf('X%i = %1.2f   ', i, xr(i));
end
fprintf('\n');

%% New set of simulations and data capture

% Fitness captures results using custom functions 
% So far, we had used both LeMeas1 and file2tableF for doing this, but
% LTspice puts results into a distinct form, so we implemented
% file2tableLTspice and readFourierTable to take it.

% generates new set of genes into a param file
paramAC(xr);

ind=1; % nem sei qq e isso de certo q da pra tirar 

simsuccess=0;

% First simmulation - tran for power and harmonic distortion
[a, b] = system([simuladorltspiceXVII circuito slash 'circuit_tran.sp']);
if a == 0
    disp('Simulation command ran successfully.');
else
    disp('Simulation command FAILED.');
    disp(b); % Show error text
end

% Captures power and fourier outputs
output_power = file2table_LTspice(1, 'circuit_tran.log', 'output_power');
[fourierTable, thd] = readFourierTable('circuit_tran.log');

% Quick check for the log
if (~isempty(output_power) || isempty(fourierTable) || isnan(thd))
    simsuccess = 1;
end

% Second simmulation - AC
[a, b] = system([simuladorltspiceXVII circuito slash 'circuit_ac.sp']);
if a == 0
    disp('Simulation command ran successfully.');
else
    disp('Simulation command FAILED.');
    disp(b); % Show error text
end

% Captures AC measures

% Build list of variable names dynamically
varNames = {};   % initialize cell array

varNames = {'f20hz', 'f30hz', 'f40hz', 'f50hz', 'f70hz', ...
            'f100hz', 'f200hz', 'f500hz', 'f700hz', 'f1000hz', ...
            'f2000hz', 'f2122hz', 'f5000hz', 'f7000hz', 'f10000hz', 'f20000hz'};

AC_values = file2table_LTspice_ac(1, 'circuit_ac.log', varNames{:});

% Quick check for the log 
if any(~isnan(AC_values))
    simsuccess = 1;   % Simulation was successful
else
    simsuccess = 0;   % Simulation failed
end

% Third simmulation - tran for slew analysis
[a, b] = system([simuladorltspiceXVII circuito slash 'circuit_slew.sp']);
if a == 0
    disp('Simulation command ran successfully.');
else
    disp('Simulation command FAILED.');
    disp(b); % Show error text
end

% Captures slew variable
slew = file2table_LTspice(1, 'circuit_slew.log','slew');

% Quick check for the log
if (~isempty(slew))
    simsuccess = 1;
end

% Fourth simulation - tran for GedLee metric
 
% Build list of variable names dynamically
varNames = {};   % reset cell array

for i = 0:100
    varNames{end+1} = ['MIN' num2str(i)];  % adds 'MIN0', 'MIN1', ..., 'MIN100'
    varNames{end+1} = ['MAX' num2str(i)];  % adds 'MAX0', 'MAX1', ..., 'MAX100'
end



% Primeiro AC
Meas = LeMeas1('circuito.ma0', 4);
if(length(Meas) > 4)
    simsuccess =1;
    maxac=Meas(1); minac=Meas(2); locut=Meas(3); hicut=Meas(4); 
    
% Reposta  
grave=abs(locut-maxac);
agudo=abs(hicut-maxac);
respfreq=maxac-minac;  % swing na resposta em frequencia (dB)
    
% Segundo Tran 0
Meas = LeMeas1('circuito.mt0', 7);
if(length(Meas) > 16)
simsuccess =2;
% Tensao 
maxv=Meas(1); minv=Meas(2);  rmsv=Meas(3);
% Corrente
maxi=Meas(4); mini=Meas(5);  rmsi=Meas(6);
% Harmonas
h1=Meas(7); h2=Meas(8); h3=Meas(9); h4=Meas(10); h5=Meas(1);
h6=Meas(12); h7=Meas(13); h8=Meas(14); h9=Meas(15);
% THD
if h1<=0.8
THDcir=Inf;
else 
THDcir=sqrt(h2^2+h3^2+h4^2+h5^2+h6^2+h7^2+h8^2+h9^2)/h1*100;
end
THDcirpeso=sqrt((h2*(2)^2/4)^2+(h3*(3)^2/4)^2+(h4*(4)^2/4)^2... 
+(h5*(5)^2/4)^2+(h6*(6)^2/4)^2+(h7*(7)^2/4)^2+(h8*(8)^2/4)^2...
+(h9*9^2/4)^2)/(h1)*100;
    
% 
        
Ganho=20*log10(rmsv/(1.1/sqrt(2)));
OutPow=rmsv*rmsi;                         
        
% Segundo Tran 1 (slew)
Meas = LeMeas1('circuito.mt1', 7);
if(length(Meas) > 19)
simsuccess=3;
            
% slew rate
slewrate=Meas(18); %V/s
            
% avaliacao
                
% Ganho Maximo
FGM = scoreAv(abs(Ganho), Gain);                
                
% Slew rate
FSL = scoreAv(slewrate*1e-6, Slew);     
                
% Output power
FOP = scoreAv(OutPow,Pow);         
                
% THD
FHD = scoreAv(THDcir,THD);      
                
% THD ponderado 
FPHD = scoreAv(THDcirpeso,Peso);    
                
% Resposta em dB
FFR = scoreAv(respfreq,Tolerancia);    
                
% Resposta grave
FRG = scoreAv(grave,Locut);       
                
% Resposta agudo
FRA = scoreAv(agudo,Hicut);      
                
%final score
sc = (FGM + FSL + FOP + FHD + FPHD + FFR + FRG + FRA)^2;
               
sci = [FGM FSL FOP FHD FPHD FFR FRG FRA];
                
contsuc= contsuc+1;
                
         
% Salva melhor solucao
if(Best.score > sc)

arq=fopen([circuito slash 'results' slash 'optimos.'...
modo namext],'a+');
fprintf(arq,'%d  %.3g\n', cont, sc);
fclose(arq);
beep;
Best.score = sc;
fprintf('*> ');
arq = fopen([circuito slash 'paramop' namext],'w');
% Aqui tem que ter infos do circuito E AS FUNCOES. 
fprintf('\r\n*Score=%.3g  Ganh=%.2gdB FGanho=%.2g ...
SlewRate=%.2gV/us FSlewRate=%.2g OutputPower=%.2gW ...
FOutputPower=%.2g THD=%.3g%% \n FTHD=%.3g ...
PTHD=%.3g%% FPTHD=%.3g Variacao_em_freq=+-%.2gdB ...
FVariacao_em_freq=+-%.2g Variacao_grave=+-%.2gdB ...
FVariacao_grave=+-%.2g Variacao_agudo=+-%.2gdB ...
FVariacao_agudo=+-%.2g \r\n',sc, Ganho, FGM, ...
slewrate, FSL, OutPow, FOP, THDcir, FHD, THDcirpeso,...
FPHD, respfreq, FFR, grave, FRG, agudo, FRA);
paramOpt(xr); %gera um arquivo de simulção que pode ...
ser usado pelo usuário  
fclose(arq);
if(Best.scoreT > sc)
Best.scoreT = sc;
Best.parameters = xr;
xT = x;
arq = fopen([circuito slash 'paramopT' namext],'w');
fprintf('\r\n*Score=%.3g  Ganh=%.2gdB FGanho=%.2g ...
SlewRate=%.2gV/us FSlewRate=%.2g OutputPower=%.2gW ...
FOutputPower=%.2g THD=%.3g%% \n FTHD=%.3g PTHD=%.3g%% ...
FPTHD=%.3g Variacao_em_freq=+-%.2gdB FVariacao_em_freq=+-%...
.2g Variacao_grave=+-%.2gdB FVariacao_grave=+-%.2g ...
Variacao_agudo=+-%.2gdB FVariacao_agudo=+-%.2g \r\n',sc,...
Ganho, FGM, slewrate, FSL, OutPow, FOP, THDcir, FHD, ...
THDcirpeso, FPHD, respfreq, FFR, grave, FRG, agudo, FRA);
paramOpt(xr) %gera um arquivo de simulção que pode ser...
usado pelo usuário
fclose(arq);
BestRes{modoind} = Best;
end
                    
% plot graphics
scorePlot(1, end+1) = cont;    scorePlot(2, end) = sc;
figure(711)
set(711, 'Name', [circuito ': Cont=' num2str(contopt, '%.1f') ...
', Best Score=' num2str(Best.scoreT, '%1.3g')], ...
'NumberTitle', 'off', 'MenuBar', 'none'); 
subplot(2, 1, 1);
semilogy(scorePlot(1, :), scorePlot(2, :), 'o');
title('score x cont');
subplot(2, 1, 2)
xp = [ x; xT]';
bar(xp, 'grouped');
title(['better parameters: score=' num2str(sc, '%1.3g')]);
pause(0.2);
end
               
% Resultados
fprintf('\r\n*Score=%.3g  Ganh=%.2gdB FGanho=%.2g ...
SlewRate=%.2gV/us FSlewRate=%.2g OutputPower=%.2gW ...
FOutputPower=%.2g THD=%.3g%% \n FTHD=%.3g PTHD=%.3g%% ...
FPTHD=%.3g Variacao_em_freq=+-%.2gdB FVariacao_em_freq=+-% ...
.2g Variacao_grave=+-%.2gdB FVariacao_grave=+-%.2g ...
Variacao_agudo=+-%.2gdB FVariacao_agudo=+-%.2g \r\n',sc, ...
Ganho, FGM, slewrate, FSL, OutPow, FOP, THDcir, FHD, ...
THDcirpeso, FPHD, respfreq, FFR, grave, FRG, agudo, FRA);
        end
    end
end

% problemas na simulacao
if (simsuccess ~= 4)
sc = inf('double');
sci = [ inf('double')  inf('double')  inf('double') ...
inf('double')  inf('double')  inf('double') inf('double') ...
inf('double') inf('double') inf('double') inf('double') ...
inf('double') inf('double')];
    fprintf('Score=%.3g  \n\n',sc);
if (simsuccess == 0)   
fprintf('Error  first simulation \n\n');
elseif (simsuccess == 1)   
fprintf('Error  AC file  \n');
fprintf('Graves=+-%.3gdB Agudos=+-%.3gdB \n\n', grave, agudo);
elseif (simsuccess == 2)   
fprintf('Error TR file 0  \n');
fprintf('Graves=+-%.3gdB Agudos=+-%.3gdB \n\n', grave, agudo);
fprintf('Ganho=%.3g OutPow=%.3gW \n\n', Ganho, OutPow);
fprintf('THD=%2.4g%% PTHD=%2.4g%% \n\n', THDcir, THDcirpeso); 
elseif (simsuccess == 3)   
fprintf('Sucess  \n'); 
fprintf('Graves=+-%.3gdB Agudos=+-%.3gdB \n\n', grave, agudo);
fprintf('Ganho=%.3g OutPow=%.3gW \n\n', Ganho, OutPow);
fprintf('THD=%2.4g%% PTHD=%2.4g%% \n\n', THDcir, THDcirpeso);
fprintf('SlewRate=%.3gV/us  \n', slewrate*1e-6);        
    end;
end;

% used parameters
for i = 1:length(xr)
    if (mod(i, 10) == 0) fprintf('\n');
    end
    fprintf('X%i= %1.1f   ', i, xr(i));
end;
fprintf('\n');

end

