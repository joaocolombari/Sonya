function [sc, sci] = fitnessHsp(x)
% sc da o scores total e sci sao os valores parciais
warning('off', 'all');

global modelo;
global modelsD;
global slash;

global simulador2019;
global simulador2019par;
global circuito;
global ParDados
global genesLB;

global Best
global BestRes;
global scorePlot;
global xT;
global modoind;
global modo;
global dif;
global snap;
global cont;
global contsuc;
global namext;
global contopt;
global const;

global Gain;
global BplusPre;
global Pow;
global BplusPower;
global THD;
global HarNum;
global Hicut;
global Locut;
global Slew;
global BminuGrid;
global BminuTail;

confplot= { 'bx:', 'rx-.', 'kx--', 'bd:', 'rd-.', 'ko--', 'bo:', 'ro-.', 'ko--', 'bp:', 'rp-.', 'kp--'}; 

% Pega dados do menu.m
%1
Gain= ParDados{1, 2};
GainMin = scoreAvPar(1, Gain);
%2
Slew= ParDados{2, 2};
SlewMin = scoreAvPar(1, Slew);
%3
Locut= ParDados{3, 2};
LocutMin = scoreAvPar(1, Locut);
%4
Hicut= ParDados{5, 2};
HicutMin = scoreAvPar(1, Hicut);
%5
Pow= ParDados{6, 2};
PowW = scoreAvPar(1, Pow);
%6
THD= ParDados{6, 2};
THDMin= scoreAvPar(1,THD);
%7
BplusPower= ParDados{7, 2};
BplusPowerMax= scoreAvPar(1, Bplus);
%8
BplusPre= ParDados{8, 2};
BplusPreMax= scoreAvPar(1, BplusPre);
%9
BminuGrid= ParDados{9, 2};
BminuGridMin= socreAvPar(1, BminuGrid);
%10
BminuTail= ParDados{10, 2};
BminuTailMin= scoreAvPar(1, BminuTail);

% denormaliza os gens
for i=1:length(genesLB) 
    if (dif(i) ~= 0)
        xr(i)= (x(j)*dif(i)+genesLB(i));
        xe(i)= x(j);
        j=j+1;
    else
        xr(i)=genesLB(i);
        xe(i)=0;
    end;
    if (snap(i) ~= 0) xr(i) = round(xr(i)/snap(i))*snap(i);  end;
end;

disp ______________________________
cont=cont +1;
fprintf('simulação = %d (sucesso = %d)\n', cont, contsuc);

% used parameters
for i = 1:length(xr)
    if (mod(i, 10) == 0) 
        fprintf('\n');
    end
    fprintf('X%i= %1.2f   ', i, xr(i));
end;    
fprintf('\n'); 

%%
% primeira simulacao: determina o ganho
ind=1;

% delete directories HSP* and files saida*
a=dir();
isub = [a(:).isdir];
 for i=1:length(isub)
    if isub(i)
      if regexp(a(i).name, 'HSP_[0123456789]')
        rmdir(a(i).name, 's');
      end;
   end;
end
[a, b] = system('del saida*.*');

% NumModel =length(MultModels{1});

% Gera o param
param_mod_HSP([circuito slash 'param'], xr);

modelsim = 1; 
% 
arq = fopen([circuito slash 'circuito' '.sp']  ,'w');
fprintf(arq, '* Circuito Completo \r\n\r\n');
fprintf(arq, '.include %s%s%s%s%s\r\n',CirOpDir, slash, modelsD, slash, modelsim{1});
fprintf(arq, '.param VDD=%1.2f  VSS=%1.2f  Cl=%1.3f  \r\n', Vdda(i),Vss, Cl(i));
fprintf(arq, '.include circuito.sp \r\n');
% if exist([circuito slash 'ring' num2str(xr(length(xr)))], 'file');
%     fprintf(arq, '.include ring%s \r\n', num2str(xr(length(xr))));
% end;
fprintf(arq, '.end');
fclose(arq);
% executa a simulacao
[a1, b] = system([simulador2019par circuito slash 'circuito' num2str(i) '.sp -o saida' num2str(i)]);

%%% 
% [~, b] = system(['START /Realtime/wait/min C:\synopsys\Hspice_A-2008.03\BIN\hspicerf.exe ' circuito '\circuito.sp']);
% verificar termino da execucao e nao seixar mais de 50seg. Matar e travar
%%%

HSexe=true;
timelimit=40;
tf=0;
ti = tic;
while ((tf<=timelimit)  && (HSexe))
    [a, b] = system('taskkill /F /IM DpAgent.exe /T');
    [a, b] = system('taskkill /F /IM WerFault.exe /T');
    [a, b] = system('tasklist /fi "imagename eq hspice.exe" /fo csv /nh');
    if (b(1) == 'I')
     HSexe = false;
     else 
     pause(0.005); 
     tf =toc(ti);
    end
end
if (tf > timelimit) 
    [a, b] =system('taskkill /IM "hspice.exe" /f /T'); 
end
 
fprintf('simulation run time= %.2gseg \n', tf);
FGain=0; FSlew=0; FLocut=0; FHicut=0; FPow=0; FTHD=0; 
FBplusPower=0; FBplusPre=0; FBminuGrid=0; FBminuTail=0;

errosimul= false; 

% lê os resultados da simulação AC
Meas = LeMeas1('circuito.ma0',4);  % de certo que esse 4 eh a linha

% verifica se gerou dado a mais
ajust=1;
if exist(['saida' num2str(j) '.msnf' num2str(length(VoltC))], 'file')
   ajust=0;
end

% check if the first simulation ran correctly
if(length(Meas) > 5)    % confirmar o tamanho
    simsucess =1;
end

% Captura os dados da meas ac
Vcmaxoffset = Meas(1); Vcminoffset = Meas(2); Vcmedioffset = Meas(3);
Potcircuit = (Vdd-Vss)*abs(Meas(4));
offset = max([abs(Vcmax - Vcmaxoffset) abs(Vcmin - Vcminoffset) abs((Vcmax+Vcmin)/2 - Vcmedioffset)]);
    
% lê os resultados da simulação Tran
Meas = LeMeas1('circuito.ma0', 3);

% check if the second simulation ran correctly
if(length(Meas) > 2)    % confirmar o tamanho
    simsucess =2;
end




for i=1:length(VoltC)
 indice=num2str(i-ajust);
 aux1=0; aux2=0;
 aux1=LeMeas1(['saida' num2str(j) '.msnf' indice], 5, 0);
 aux2=LeMeas1(['saida' num2str(j) '.msnnoi' indice], 3, 0);
 if (length(aux1) == (6+HarNum)) && (length(aux2) == 3)
     if (aux1(4) > 0.1*AmpOut0)
         MeasB(k,:)=aux1;
         FreqG(k, j)=MeasB(k, 1)/1.0e9;
         FreqM(k)=MeasB(k, 1)/1.0e9;
         PotM(k, j)=MeasB(k, 2)/1.0e-6;
         MeasP(k, :)=aux2;
         VoltCm(j, k)=VoltC(i);
         k=k+1;
     end
 end;



end

